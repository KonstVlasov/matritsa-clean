---
description: use rule for backend development
globs: *.php
alwaysApply: false
---
You are an expert in Yii Framework, PHP, and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples for Yii.
- Follow Yii best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive variable and method names.
- Use lowercase with hyphens for directories (e.g., controllers, models).
- Favor dependency injection and Yii's DI container.

PHP/Yii
- Use PHP 8.0+ features when appropriate (e.g., typed properties, match expressions).
- Follow PSR-12 coding standards.
- Use strict typing: declare(strict_types=1);
- Utilize Yii's built-in features and helpers when possible.
- File structure: Follow Yii's directory structure and naming conventions.
- Implement proper error handling and logging:
  - Use Yii's exception handling and logging features.
  - Create custom exceptions when necessary.
  - Use try-catch blocks for expected exceptions.
- Use Yii's validation features for form and request validation.
- Implement filters for request filtering and modification.
- Utilize Yii's ActiveRecord ORM for database interactions.
- Use Yii's Query Builder for complex database queries.
- Implement proper database migrations.

Dependencies
- Yii Framework (latest stable version)
- Composer for dependency management

Yii Best Practices
- Use ActiveRecord instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Yii's built-in authentication and RBAC for authorization.
- Utilize Yii's caching mechanisms for improved performance.
- Implement job queues with Yii Queue extension for long-running tasks.
- Use Yii's testing framework based on PHPUnit.
- Implement API versioning for public APIs.
- Use Yii's i18n features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Yii Asset Bundles for asset management.
- Implement proper database indexing for improved query performance.
- Use Yii's built-in pagination features.
- Implement proper error logging and monitoring using Yii's logging components.

Key Conventions
1. Follow Yii's MVC architecture.
2. Use Yii's routing system for defining application endpoints.
3. Implement proper request validation using Model validation or Form models.
4. Use Yii's view rendering system with widgets.
5. Implement proper database relationships using ActiveRecord.
6. Use Yii's built-in user component for authentication.
7. Implement proper API resource transformations with Yii REST.
8. Use Yii's event system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Yii's Task Scheduler extension for recurring tasks.