const fs = require('fs');
const path = require('path');
const imagemin = require('imagemin');
const imageminPngquant = require('imagemin-pngquant');
const imageminOptipng = require('imagemin-optipng');
const imageminMozjpeg = require('imagemin-mozjpeg');
const { promisify } = require('util');
const glob = promisify(require('glob'));

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è –≤—Å–µ—Ö PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç imagemin —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏ pngquant –∏ optipng –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
 */

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞
const excludeDirs = ['node_modules', 'dist', 'build', 'temp'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function compressImage(filePath) {
  try {
    const dir = path.dirname(filePath);
    const fileName = path.basename(filePath);
    const ext = path.extname(filePath).toLowerCase();
    
    console.log(`–°–∂–∏–º–∞—é: ${filePath}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ —Å–∂–∞—Ç–∏—è
    const originalSize = fs.statSync(filePath).size;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    const tempDir = path.join(dir, '.temp_compressed');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const plugins = [];
    
    if (ext === '.png') {
      // –î–ª—è PNG –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      plugins.push(
        imageminPngquant({
          quality: [0.3, 0.5], // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
          speed: 1,
          strip: true
        }),
        imageminOptipng({
          optimizationLevel: 7 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        })
      );
    } else if (ext === '.jpg' || ext === '.jpeg') {
      // –î–ª—è JPEG
      plugins.push(
        imageminMozjpeg({
          quality: 70,
          progressive: true
        })
      );
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
    if (plugins.length === 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é: ${filePath} (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç)`);
      return {
        file: filePath,
        originalSize,
        compressedSize: originalSize,
        savings: 0,
        percentage: 0
      };
    }
    
    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await imagemin([filePath], {
      destination: tempDir,
      plugins
    });
    
    const tempFilePath = path.join(tempDir, fileName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    const compressedSize = fs.statSync(tempFilePath).size;
    const savings = originalSize - compressedSize;
    const percentage = (savings / originalSize * 100).toFixed(2);
    
    // –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if (compressedSize < originalSize) {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
      const backupDir = path.join(dir, '.backup');
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      fs.copyFileSync(filePath, path.join(backupDir, fileName));
      
      // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–∂–∞—Ç—ã–º —Ñ–∞–π–ª–æ–º
      fs.copyFileSync(tempFilePath, filePath);
      
      console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${filePath}`);
      console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(originalSize / 1024).toFixed(2)} KB`);
      console.log(`   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(compressedSize / 1024).toFixed(2)} KB`);
      console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${(savings / 1024).toFixed(2)} KB (${percentage}%)`);
    } else {
      console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${filePath} (—Å–∂–∞—Ç–∏–µ –Ω–µ –¥–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏–π)`);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.rmSync(tempDir, { recursive: true, force: true });
    
    return {
      file: filePath,
      originalSize,
      compressedSize: compressedSize < originalSize ? compressedSize : originalSize,
      savings: compressedSize < originalSize ? savings : 0,
      percentage: compressedSize < originalSize ? percentage : 0
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${filePath}:`, error);
    return {
      file: filePath,
      error: error.message,
      originalSize: 0,
      compressedSize: 0,
      savings: 0,
      percentage: 0
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ò—â–µ–º PNG –∏ JPEG —Ñ–∞–π–ª—ã
    const imageFiles = await glob('**/*.{png,jpg,jpeg}', { 
      nodir: true,
      ignore: excludeDirs.map(dir => `**/${dir}/**`),
      nocase: true // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö
    });
    
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    if (imageFiles.length === 0) {
      console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É.');
      return;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
    const results = [];
    for (const file of imageFiles) {
      results.push(await compressImage(file));
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successful = results.filter(r => !r.error && r.savings > 0);
    const skipped = results.filter(r => !r.error && r.savings === 0);
    const failed = results.filter(r => r.error);
    
    const totalOriginal = successful.reduce((sum, r) => sum + r.originalSize, 0);
    const totalCompressed = successful.reduce((sum, r) => sum + r.compressedSize, 0);
    const totalSavings = totalOriginal - totalCompressed;
    const totalPercentage = totalOriginal > 0 ? (totalSavings / totalOriginal * 100).toFixed(2) : 0;
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${imageFiles.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ: ${successful.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã): ${skipped.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   –û—à–∏–±–æ–∫: ${failed.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginal / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalCompressed / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(totalSavings / 1024 / 1024).toFixed(2)} MB (${totalPercentage}%)`);
    
    if (failed.length > 0) {
      console.log('\n‚ö†Ô∏è –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
      failed.forEach(f => console.log(`   - ${f.file}: ${f.error}`));
    }
    
    console.log('\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö .backup');
    
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 