const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const glob = promisify(require('glob'));

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö —Å–∞–π—Ç–∞
 * –ó–∞–º–µ–Ω—è–µ—Ç .png –Ω–∞ .webp –∏ .jpg/.jpeg –Ω–∞ .webp
 */

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ —Å–∞–π—Ç–∞
const SITE_DIR = 'u2865078/data/www/matritsa-taro.ru';

// –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const FILE_EXTENSIONS = ['html', 'htm', 'js', 'css', 'php'];

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const IMAGE_PATTERNS = [
  // –î–ª—è –ø—É—Ç–µ–π –≤ –∫–∞–≤—ã—á–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ src –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏ —Ç.–¥.)
  {
    regex: /(['"])([^'"]*\.(?:png|jpg|jpeg))(['"])/gi,
    replacer: (match, quote1, path, quote2) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ webp
      if (path.toLowerCase().endsWith('.webp')) {
        return match;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .webp
      const newPath = path.replace(/\.(png|jpg|jpeg)$/i, '.webp');
      return `${quote1}${newPath}${quote2}`;
    }
  },
  
  // –î–ª—è url() –≤ CSS
  {
    regex: /url\((['"]?)([^'"()]*\.(?:png|jpg|jpeg))(['"]?)\)/gi,
    replacer: (match, quote1, path, quote2) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ webp
      if (path.toLowerCase().endsWith('.webp')) {
        return match;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .webp
      const newPath = path.replace(/\.(png|jpg|jpeg)$/i, '.webp');
      return `url(${quote1}${newPath}${quote2})`;
    }
  },
  
  // –î–ª—è HTML —Ç–µ–≥–æ–≤ img
  {
    regex: /(<img[^>]*src=["'])([^"']*\.(?:png|jpg|jpeg))(["'][^>]*>)/gi,
    replacer: (match, prefix, path, suffix) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ webp
      if (path.toLowerCase().endsWith('.webp')) {
        return match;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .webp
      const newPath = path.replace(/\.(png|jpg|jpeg)$/i, '.webp');
      return `${prefix}${newPath}${suffix}`;
    }
  },
  
  // –î–ª—è HTML —Ç–µ–≥–æ–≤ picture —Å source
  {
    regex: /(<source[^>]*srcset=["'])([^"']*\.(?:png|jpg|jpeg))(["'][^>]*>)/gi,
    replacer: (match, prefix, path, suffix) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ webp
      if (path.toLowerCase().endsWith('.webp')) {
        return match;
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .webp
      const newPath = path.replace(/\.(png|jpg|jpeg)$/i, '.webp');
      return `${prefix}${newPath}${suffix}`;
    }
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ WebP
function webpFileExists(imagePath) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const fullPath = path.resolve(process.cwd(), imagePath);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏–º—è —Ñ–∞–π–ª–∞
  const dir = path.dirname(fullPath);
  const fileNameWithoutExt = path.basename(fullPath, path.extname(fullPath));
  
  // –ü—É—Ç—å –∫ WebP –≤–µ—Ä—Å–∏–∏
  const webpPath = path.join(dir, `${fileNameWithoutExt}.webp`);
  
  return fs.existsSync(webpPath);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
async function replaceImageReferences(filePath) {
  try {
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${filePath}`);
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    let replacements = 0;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    for (const pattern of IMAGE_PATTERNS) {
      content = content.replace(pattern.regex, (match, ...args) => {
        const result = pattern.replacer(match, ...args);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞–º–µ–Ω–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if (result !== match) {
          replacements++;
        }
        
        return result;
      });
    }
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    if (replacements > 0) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${replacements} –≤ —Ñ–∞–π–ª–µ ${filePath}`);
      return {
        file: filePath,
        replacements
      };
    } else {
      console.log(`‚ÑπÔ∏è –ù–µ—Ç –∑–∞–º–µ–Ω –≤ —Ñ–∞–π–ª–µ ${filePath}`);
      return {
        file: filePath,
        replacements: 0
      };
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    return {
      file: filePath,
      error: error.message
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${SITE_DIR}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
    const files = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const ext of FILE_EXTENSIONS) {
      const pattern = `${SITE_DIR}/**/*.${ext}`;
      const foundFiles = await glob(pattern, { nodir: true });
      files.push(...foundFiles);
    }
    
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    if (files.length === 0) {
      console.log('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É.');
      return;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    const backupDir = `./${path.basename(SITE_DIR)}_backup_${Date.now()}`;
    console.log(`üì¶ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ ${backupDir}`);
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const copyDir = (src, dest) => {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const entries = fs.readdirSync(src, { withFileTypes: true });
      
      // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      for (const entry of entries) {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        
        if (entry.isDirectory()) {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          copyDir(srcPath, destPath);
        } else {
          // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
          fs.copyFileSync(srcPath, destPath);
        }
      }
    };
    
    copyDir(SITE_DIR, backupDir);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ ${backupDir}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    const results = [];
    for (const file of files) {
      results.push(await replaceImageReferences(file));
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successful = results.filter(r => !r.error);
    const failed = results.filter(r => r.error);
    const totalReplacements = successful.reduce((sum, r) => sum + r.replacements, 0);
    const filesWithReplacements = successful.filter(r => r.replacements > 0).length;
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${files.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`   –§–∞–π–ª–æ–≤ —Å –∑–∞–º–µ–Ω–∞–º–∏: ${filesWithReplacements}`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: ${totalReplacements}`);
    console.log(`   –û—à–∏–±–æ–∫: ${failed.length}`);
    
    if (failed.length > 0) {
      console.log('\n‚ö†Ô∏è –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
      failed.forEach(f => console.log(`   - ${f.file}: ${f.error}`));
    }
    
    console.log('\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    console.log(`   ${backupDir}`);
    console.log('   –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–æ–π –∫–æ–ø–∏–∏.');
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π!');
    console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 